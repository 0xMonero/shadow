#!/usr/bin/env python

# The Shadow Simulator
#
# Copyright (c) 2010-2012 Rob Jansen <jansen@cs.umn.edu>
#
# This file is part of Shadow.
#
# Shadow is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Shadow is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Shadow.  If not, see <http://www.gnu.org/licenses/>.
#

import sys, os, subprocess
from datetime import datetime

# path to the preload lib - when installed, we should be able to find it here
PRELOAD_PATH=os.path.abspath(os.path.dirname(__file__) + "/../lib/libshadow-preload.so")
# path to valgrind
VALGRIND_PATH="/usr/bin/valgrind"

def main():
    log("Use 'shadow --usage' to get help for the Shadow wrapper script")
    
    preloads = [PRELOAD_PATH]
    valgrind = False
    shadowArgs = [os.path.dirname(__file__) + "/shadow-bin"]
    
    # parse the arguments
    for i in xrange(1, len(sys.argv)):
        arg = sys.argv[i]
        if arg.find("--valgrind") > -1: valgrind = True
        elif arg.find("--preload=") > -1: preloads.append(arg[arg.index("--preload=")+10:])
        elif arg.find("--usage") > -1:
            help()
            exit()
        else: shadowArgs.append(arg)
        
    # make sure the preload library files exist
    for p in preloads:
        if not os.path.exists(p): 
            log("Error! Path does not exist: " + p)
            exit(-1)
    
    # set LD_PRELOAD environment
    ld_preload = ':'.join(preloads)
    os.putenv("LD_PRELOAD", ld_preload)
    log("set environmental variable: LD_PRELOAD=" + ld_preload)
    
    command = ' '.join(shadowArgs)
    if(valgrind): 
        # make GLib avoid things that confuse valgrind
        os.putenv("G_DEBUG", "gc-friendly")
        log("set environmental variable: G_DEBUG=gc-friendly")
        os.putenv("G_SLICE", "always-malloc")
        log("set environmental variable: G_SLICE=always-malloc")
        
        ## The following can be used to add internal GLib memory validation that
        ## will abort the program if it finds an error. This is useful outside
        ## of the valgrind context, so that valgrind doesn't complain about
        ## the implementation of the GLib validator. 
        ## e.g. $ G_SLICE=debug-blocks shadow --echo
        #os.putenv("G_SLICE", "debug-blocks")
        #log("set environmental variable: G_SLICE=debug-blocks")
        
        command = VALGRIND_PATH + " --leak-check=full --show-reachable=yes --track-origins=yes --trace-children=yes --log-file=valgrind-shadow-%p.log --error-limit=no " + command
        
    log("running: '" + command + "'")
    retcode = subprocess.call(command.strip().split())
    log("run returned " + str(retcode))
    
def help():
    usage = "shadow [--preload=LIBRARY] [--valgrind] ..."
    
    help = "Utility to help run the shadow simulator by handling LD_PRELOADs\nand passing remaining options to shadow-bin"
    usageHelp = "  --usage\n\tprint this help and exit"
    preloadHelp = "  --preload=LIBRARY\n\tadd a library to the list of libraries that will be preloaded when running shadow-bin\n\t(default=[" + PRELOAD_PATH + "])"
    valgrindHelp = "  --valgrind\n\trun shadow-bin under the valgrind memory checker\n\t(default=False)"
   
    print usage
    print ""
    print help
    print ""
    print usageHelp
    print preloadHelp
    print valgrindHelp
    
def log(msg):
    color_start_code = "\033[94m" # red: \033[91m"
    color_end_code = "\033[0m"
    prefix = "[" + str(datetime.now()) + "] Shadow wrapper script: "
    print >> sys.stderr, color_start_code + prefix + msg + color_end_code

if __name__ == '__main__':
    main()
