Shadow (c) 2011 Rob Jansen jansen@cs.umn.edu

I. Shadow dependencies
======================
The following are required to properly build and run Shadow:
  - gcc
  - cmake >= 2.6
  - flex
  - bison
  - openssl
  - libevent >= 2.0.10
  
The following are optional, but HIGHLY recommended, for building and running Shadow:
  - python = 2.7.1


II. Building Shadow
===================
The setup.py script has an extensive help menu ($ python setup.py --help)

By default, the following will build and install to /usr/local (and so requires root)
$ python setup.py build
$ python setup.py install

-or-

The following will build and install to ~/.local (no root required)
$ python setup.py auto

If using the second option, make sure ~/.local/bin is in your PATH.

All build output is generated out-of-source, by default to the ./build directory (although this 
location can be modified with the setup.py script). Both methods are
wrappers to cmake and make for building Shadow. Using cmake and make directly
is also possible, but strongly discouraged.

III. Running Shadow
===================
There are multiple ways to run Shadow.

A. Using installed shadow script
------------------------
Installing shadow installs a script called "shadow", a wrapper to assist in running the
Shadow binary. The shadow script has several built-in plug-ins that can run automatically:

$ shadow autorun --help

to get usage and help regarding running the built-in plug-ins. Most of the options
can be left as default, and you need only specify which plug-in example
you want to run, e.g.

$ shadow autorun --echo-eth

When developing custom plug-ins, you may also run your plug-in with the shadow script
by using the 'run' command. Again, use

$ shadow run --help

for usage and help. When running a custom module, a dsim file describing the
experiment must be provided. Examples of dsim files can be found in mode 
src/module/* directories. Also see doc/ for the dsim API.

B. Running the shadow binary directly
-------------------------------------
You may also invoke the binary directly without the use of the
python script. Get usage information from Shadow with:

$ shadow-bin --help

The shadow binary also requires a dsim file. If possible, it is strongly recommended to
use the python script.
