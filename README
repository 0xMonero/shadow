Shadow (c) 2010-2011 Rob Jansen jansen@cs.umn.edu

A. Dependencies
---------------
Shadow requires CMake >= 2.6 and python 2.7

B. Setup
--------
Shadow does not require root privileges, and the default and recommended setup
is to install to ~/.shadow:
$ python setup.py build
$ python setup.py install

You may add ~/.shadow/bin to your PATH for convenience.

The setup.py script will help you configure, build, and install Shadow. It has 
an extensive help menu which can be accessed with:
$ python setup.py --help

All build output is generated out-of-source, by default to the ./build directory.
The setup.py script is a wrapper to cmake and make. Using cmake and make directly
is also possible, but strongly discouraged. Installing shadow installs a script 
called "shadow", a wrapper to assist in running the Shadow binary. 

C. Running Shadow
-----------------
Shadow can run several built-in plug-ins automatically. Use the following to get 
usage and help regarding the built-in plug-ins:

$ shadow --help-plug-ins

When developing and running a custom plug-in, a valid XML file describing the
experiment must be provided. Examples of XML files can be found in the
resource/ directory.

D. Developer's Notes
--------------------

Debugging

To add extra debugging information and messages, add the -g flag when building
shadow. See the help menu with $ python setup.py --help.

If you want to be able to run Shadow through valgrind and the application you 
are running in Shadow uses OpenSSL, you should configure OpenSSL with the 
additional option: "-DPURIFY". This fixes OpenSSL so it doesn't break valgrind.

System Limits

There are some default system limits you'll want to be aware of. One is a limit
on the number of message queues and total bytes in them. Shadow will use a
message queue for each process, meaning it will use X=2 message queues by default,
and more if you try to run with multiple workers (not currently recommended).
Each queue takes about 81920 bytes, which means you will only be able to run 4
experiments simultaneously with the default limits.

See: 
$ man mq_overview
$ ulimit -q
$ cat /proc/sys/fs/mqueue/*

There is also a limit on the number of open files. If each node in your shadow
application opens many descriptors, you'll likely want to increase the limit so
you application doesn't start getting errors when calling open().

See:
$ ulimit -n
$ cat /proc/sys/fs/file-*

Limits can be raised by modifying /etc/security/limits.conf and rebooting.
For example:
* soft msgqueue 8192000
* soft msgqueue 8192000
* soft nofile 10000
* hard nofile 10000
