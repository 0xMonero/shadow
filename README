Scallion - Shadow plug-in running Tor (c) 2011 Rob Jansen jansen@cs.umn.edu

======================
0. Quickstart (Install to ~/.local)
======================
(replace "rob" with your username)

Download and install shadow and its dependencies following the Quickstart in the shadow README.

X, Y, and Z are version numbers:
$ wget http://shadow.cs.umn.edu/downloads/shadow-scallion-vX.Y.Z.tar.gz
$ tar xvzf shadow-scallion-vX.Y.Z.tar.gz
$ cd shadow-scallion-vX.Y.Z
$ python setup.py auto

======================
I. Scallion dependencies
======================
The following are required to properly build and run Scallion:
  - Shadow, and its dependencies

======================
II. Building Scallion
======================
The setup.py script has an extensive help menu ($ python setup.py --help)

The following will build and install to ~/.local (no root required)
Please make sure ~/.local/bin is in your PATH.
$ python setup.py auto

-or-

By default, the following will build and install to /usr/local (and so requires root)
$ python setup.py build
$ python setup.py install

All build output is generated out-of-source, by default to the ./build directory (although this 
location can be modified with the setup.py script). Both methods are
wrappers to cmake and make for building Shadow. Using cmake and make directly
is also possible, but strongly discouraged.

======================
III. Running Scallion
======================
Installing scallion installs a script called "scallion", a wrapper to assist in 
generating Tor topolgies and running experiments. To get started:

$ scallion --help

======================
IV. Developer's Notes:
======================
!!!IMPORTANT!!!
These are old notes. We no longer require patches as everything is
handled by our python installer scripts. Notes are left here for historical
reasons.

Scallion is a special plugin for shadow that allows shadow to run the Tor
(torproject.org) software. There are several modifications to Tor that must be
made to allow this to happen. Those modifications are stored on a branch of a 
clone of the Tor git master repository. This way, patches can be created for
any version of Tor by merging new changes into the local scallion branch. Our
current approach is to create patches from a diff of archived Tor releases and
our scallion branch, so that others can simply download the correct release,
apply our patch, and run scallion in shadow.

Scallion also requires some other libs to be locally installed, like libevent
and openssl. Of course, the shadowrunner.py script will handle all of the dirty 
work for you. However, patches must be created and their paths are currently 
hard-coded. To create a patch, first export the scallion branch from git with 
something like:

$ git archive --prefix=tor-0.2.2.15-alpha-scallion/ scallion | gzip > tor-0.2.2.15-alpha-scallion.tar.gz

Then download the tor-0.2.2.15-alpha.tar.gz release from archive.torproject.org,
extract both tar files, and create the patch:

$ diff -Naur tor-0.2.2.15-alpha tor-0.2.2.15-alpha-scallion > tor-0.2.2.15-alpha.scallion.patch

Place the patch in contrib/patches. Note - you may want to remove the 'doc' and
and the 'WIN32Build' directories from the extracted trees in order to reduce the
size of the created patch file. If needed, the setup.py script will 
automatically download the correct version of Tor apply the patch:

$ patch -Np1 --batch -i path/to/tor-0.2.2.15-alpha.scallion.patch
